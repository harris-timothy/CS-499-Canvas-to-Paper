/*
 * This file is generated by jOOQ.
 */
package cs499.data_classes.tables;


import cs499.data_classes.DefaultSchema;
import cs499.data_classes.Indexes;
import cs499.data_classes.Keys;
import cs499.data_classes.tables.records.QuestionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Question extends TableImpl<QuestionRecord> {
	
	public Condition abet = QUESTION.ABET.eq(1);

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>question</code>
     */
    public static final Question QUESTION = new Question();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionRecord> getRecordType() {
        return QuestionRecord.class;
    }

    /**
     * The column <code>question.id</code>.
     */
    public final TableField<QuestionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>question.name</code>.
     */
    public final TableField<QuestionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>question.description</code>.
     */
    public final TableField<QuestionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>question.api_id</code>.
     */
    public final TableField<QuestionRecord, Integer> API_ID = createField(DSL.name("api_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>question.qti_id</code>.
     */
    public final TableField<QuestionRecord, String> QTI_ID = createField(DSL.name("qti_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>question.type</code>.
     */
    public final TableField<QuestionRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>question.points_possible</code>.
     */
    public final TableField<QuestionRecord, Float> POINTS_POSSIBLE = createField(DSL.name("points_possible"), SQLDataType.REAL, this, "");

    /**
     * The column <code>question.answers</code>.
     */
    public final TableField<QuestionRecord, String> ANSWERS = createField(DSL.name("answers"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>question.abet</code>.
     */
    public final TableField<QuestionRecord, Integer> ABET = createField(DSL.name("abet"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>question.grading_instructions</code>.
     */
    public final TableField<QuestionRecord, String> GRADING_INSTRUCTIONS = createField(DSL.name("grading_instructions"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>question.reference_id</code>.
     */
    public final TableField<QuestionRecord, Integer> REFERENCE_ID = createField(DSL.name("reference_id"), SQLDataType.INTEGER, this, "");

    private Question(Name alias, Table<QuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Question(Name alias, Table<QuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>question</code> table reference
     */
    public Question(String alias) {
        this(DSL.name(alias), QUESTION);
    }

    /**
     * Create an aliased <code>question</code> table reference
     */
    public Question(Name alias) {
        this(alias, QUESTION);
    }

    /**
     * Create a <code>question</code> table reference
     */
    public Question() {
        this(DSL.name("question"), null);
    }

    public <O extends Record> Question(Table<O> child, ForeignKey<O, QuestionRecord> key) {
        super(child, key, QUESTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_QUESTION_API_ID, Indexes.IDX_QUESTION_QTI_ID);
    }

    @Override
    public UniqueKey<QuestionRecord> getPrimaryKey() {
        return Keys.QUESTION__;
    }

    @Override
    public Question as(String alias) {
        return new Question(DSL.name(alias), this);
    }

    @Override
    public Question as(Name alias) {
        return new Question(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Question rename(String name) {
        return new Question(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Question rename(Name name) {
        return new Question(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, Integer, String, String, Float, String, Integer, String, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
