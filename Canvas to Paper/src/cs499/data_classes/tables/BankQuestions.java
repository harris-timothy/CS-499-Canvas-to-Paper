/*
 * This file is generated by jOOQ.
 */
package cs499.data_classes.tables;


import cs499.data_classes.DefaultSchema;
import cs499.data_classes.Keys;
import cs499.data_classes.tables.records.BankQuestionsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankQuestions extends TableImpl<BankQuestionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>bank_questions</code>
     */
    public static final BankQuestions BANK_QUESTIONS = new BankQuestions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankQuestionsRecord> getRecordType() {
        return BankQuestionsRecord.class;
    }

    /**
     * The column <code>bank_questions.question_id</code>.
     */
    public final TableField<BankQuestionsRecord, Integer> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bank_questions.bank_id</code>.
     */
    public final TableField<BankQuestionsRecord, Integer> BANK_ID = createField(DSL.name("bank_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private BankQuestions(Name alias, Table<BankQuestionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankQuestions(Name alias, Table<BankQuestionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>bank_questions</code> table reference
     */
    public BankQuestions(String alias) {
        this(DSL.name(alias), BANK_QUESTIONS);
    }

    /**
     * Create an aliased <code>bank_questions</code> table reference
     */
    public BankQuestions(Name alias) {
        this(alias, BANK_QUESTIONS);
    }

    /**
     * Create a <code>bank_questions</code> table reference
     */
    public BankQuestions() {
        this(DSL.name("bank_questions"), null);
    }

    public <O extends Record> BankQuestions(Table<O> child, ForeignKey<O, BankQuestionsRecord> key) {
        super(child, key, BANK_QUESTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BankQuestionsRecord> getPrimaryKey() {
        return Keys.BANK_QUESTIONS__;
    }

    @Override
    public BankQuestions as(String alias) {
        return new BankQuestions(DSL.name(alias), this);
    }

    @Override
    public BankQuestions as(Name alias) {
        return new BankQuestions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankQuestions rename(String name) {
        return new BankQuestions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankQuestions rename(Name name) {
        return new BankQuestions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
