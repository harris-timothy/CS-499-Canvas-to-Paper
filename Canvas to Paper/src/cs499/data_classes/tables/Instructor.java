/*
 * This file is generated by jOOQ.
 */
package cs499.data_classes.tables;


import cs499.data_classes.DefaultSchema;
import cs499.data_classes.Keys;
import cs499.data_classes.tables.records.InstructorRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Instructor extends TableImpl<InstructorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>instructor</code>
     */
    public static final Instructor INSTRUCTOR = new Instructor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstructorRecord> getRecordType() {
        return InstructorRecord.class;
    }

    /**
     * The column <code>instructor.id</code>.
     */
    public final TableField<InstructorRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>instructor.fname</code>.
     */
    public final TableField<InstructorRecord, String> FNAME = createField(DSL.name("fname"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>instructor.lname</code>.
     */
    public final TableField<InstructorRecord, String> LNAME = createField(DSL.name("lname"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>instructor.title</code>.
     */
    public final TableField<InstructorRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>instructor.email</code>.
     */
    public final TableField<InstructorRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>instructor.token</code>.
     */
    public final TableField<InstructorRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>instructor.api_id</code>.
     */
    public final TableField<InstructorRecord, Integer> API_ID = createField(DSL.name("api_id"), SQLDataType.INTEGER, this, "");

    private Instructor(Name alias, Table<InstructorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Instructor(Name alias, Table<InstructorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>instructor</code> table reference
     */
    public Instructor(String alias) {
        this(DSL.name(alias), INSTRUCTOR);
    }

    /**
     * Create an aliased <code>instructor</code> table reference
     */
    public Instructor(Name alias) {
        this(alias, INSTRUCTOR);
    }

    /**
     * Create a <code>instructor</code> table reference
     */
    public Instructor() {
        this(DSL.name("instructor"), null);
    }

    public <O extends Record> Instructor(Table<O> child, ForeignKey<O, InstructorRecord> key) {
        super(child, key, INSTRUCTOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<InstructorRecord> getPrimaryKey() {
        return Keys.INSTRUCTOR__;
    }

    @Override
    public Instructor as(String alias) {
        return new Instructor(DSL.name(alias), this);
    }

    @Override
    public Instructor as(Name alias) {
        return new Instructor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Instructor rename(String name) {
        return new Instructor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Instructor rename(Name name) {
        return new Instructor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
