/*
 * This file is generated by jOOQ.
 */
package cs499.data_classes.tables;


import cs499.data_classes.DefaultSchema;
import cs499.data_classes.Keys;
import cs499.data_classes.tables.records.QuizReferenceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuizReference extends TableImpl<QuizReferenceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>quiz_reference</code>
     */
    public static final QuizReference QUIZ_REFERENCE = new QuizReference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizReferenceRecord> getRecordType() {
        return QuizReferenceRecord.class;
    }

    /**
     * The column <code>quiz_reference.quiz_id</code>.
     */
    public final TableField<QuizReferenceRecord, Integer> QUIZ_ID = createField(DSL.name("quiz_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>quiz_reference.reference_id</code>.
     */
    public final TableField<QuizReferenceRecord, Integer> REFERENCE_ID = createField(DSL.name("reference_id"), SQLDataType.INTEGER, this, "");

    private QuizReference(Name alias, Table<QuizReferenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuizReference(Name alias, Table<QuizReferenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>quiz_reference</code> table reference
     */
    public QuizReference(String alias) {
        this(DSL.name(alias), QUIZ_REFERENCE);
    }

    /**
     * Create an aliased <code>quiz_reference</code> table reference
     */
    public QuizReference(Name alias) {
        this(alias, QUIZ_REFERENCE);
    }

    /**
     * Create a <code>quiz_reference</code> table reference
     */
    public QuizReference() {
        this(DSL.name("quiz_reference"), null);
    }

    public <O extends Record> QuizReference(Table<O> child, ForeignKey<O, QuizReferenceRecord> key) {
        super(child, key, QUIZ_REFERENCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<QuizReferenceRecord> getPrimaryKey() {
        return Keys.QUIZ_REFERENCE__;
    }

    @Override
    public QuizReference as(String alias) {
        return new QuizReference(DSL.name(alias), this);
    }

    @Override
    public QuizReference as(Name alias) {
        return new QuizReference(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizReference rename(String name) {
        return new QuizReference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizReference rename(Name name) {
        return new QuizReference(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
