/*
 * This file is generated by jOOQ.
 */
package cs499.data_classes.tables;


import cs499.data_classes.DefaultSchema;
import cs499.data_classes.Indexes;
import cs499.data_classes.Keys;
import cs499.data_classes.tables.records.SectionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Section extends TableImpl<SectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>section</code>
     */
    public static final Section SECTION = new Section();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SectionRecord> getRecordType() {
        return SectionRecord.class;
    }

    /**
     * The column <code>section.id</code>.
     */
    public final TableField<SectionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>section.course_id</code>.
     */
    public final TableField<SectionRecord, Integer> COURSE_ID = createField(DSL.name("course_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>section.instructor_id</code>.
     */
    public final TableField<SectionRecord, Integer> INSTRUCTOR_ID = createField(DSL.name("instructor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>section.canvas_id</code>.
     */
    public final TableField<SectionRecord, String> CANVAS_ID = createField(DSL.name("canvas_id"), SQLDataType.CLOB, this, "");

    private Section(Name alias, Table<SectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Section(Name alias, Table<SectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>section</code> table reference
     */
    public Section(String alias) {
        this(DSL.name(alias), SECTION);
    }

    /**
     * Create an aliased <code>section</code> table reference
     */
    public Section(Name alias) {
        this(alias, SECTION);
    }

    /**
     * Create a <code>section</code> table reference
     */
    public Section() {
        this(DSL.name("section"), null);
    }

    public <O extends Record> Section(Table<O> child, ForeignKey<O, SectionRecord> key) {
        super(child, key, SECTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_SECTION_CANVAS_ID);
    }

    @Override
    public UniqueKey<SectionRecord> getPrimaryKey() {
        return Keys.SECTION__;
    }

    @Override
    public Section as(String alias) {
        return new Section(DSL.name(alias), this);
    }

    @Override
    public Section as(Name alias) {
        return new Section(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Section rename(String name) {
        return new Section(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Section rename(Name name) {
        return new Section(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
